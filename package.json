{
  "name": "sql-formatter-vsc",
  "displayName": "SQL Formatter VSCode",
  "description": "Official VSCode Extension of SQL Formatter library",
  "version": "2.0.2",
  "publisher": "ReneSaarsoo",
  "contributors": [
    "Ben (benfdking)",
    "Boris Verkhovskiy <boris.verk@gmail.com>",
    "Hisaki Akaza (the-red)",
    "inferrinizzard <inferrinizzard@gmail.com>",
    "Justin Carrus <carrus.justin@gmail.com>",
    "Rene Saarsoo <nene@triin.net>",
    "Sean Song <mail@seansong.dev>",
    "Tomoyuki Saoi <tomoyuki.saoi@hq-hq.co.jp>"
  ],
  "license": "MIT",
  "icon": "sql-formatter-icon.png",
  "engines": {
    "vscode": "^1.75.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sql-formatter-org/sql-formatter-vscode"
  },
  "bugs": {
    "url": "https://github.com/sql-formatter-org/sql-formatter/issues"
  },
  "categories": [
    "Formatters",
    "Other"
  ],
  "keywords": [
    "bigquery",
    "db2",
    "hive",
    "formatter",
    "mariadb",
    "mssql",
    "mysql",
    "node",
    "n1ql",
    "plsql",
    "pl/sql",
    "postgres",
    "postgresql",
    "presto",
    "prettier",
    "redshift",
    "singlestoredb",
    "snowflake",
    "spark",
    "sparksql",
    "sql",
    "sqlite",
    "sql server",
    "trino",
    "transactsql",
    "tsql"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "browser": "./out/extension.js",
  "scripts": {
    "clean": "rimraf out .vscode-test",
    "compile": "tsc --project ./tsconfig.json",
    "compile:types": "tsc --emitDeclarationOnly --project ./tsconfig.json",
    "watch": "tsc --watch --project ./",
    "build": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "build:prod": "yarn run build --minify && yarn run compile:types",
    "build:dev": "yarn run build --sourcemap && yarn run compile:types",
    "vscode:prepublish": "yarn run build:prod",
    "lint": "eslint src --ext ts",
    "pretest": "yarn run compile && yarn run lint",
    "test": "node ./out/test/runTest.js",
    "vsce:package": "vsce package",
    "vsce:publish": "vsce publish",
    "run-in-browser": "vscode-test-web --browserType=chromium --open-devtools --extensionDevelopmentPath=. ."
  },
  "dependencies": {
    "sql-formatter": "^12.2.4"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.63.0",
    "@typescript-eslint/eslint-plugin": "^6.2.1",
    "@typescript-eslint/parser": "^6.2.1",
    "@vscode/test-electron": "^1.6.2",
    "@vscode/test-web": "^0.0.34",
    "esbuild": "^0.18.19",
    "eslint": "^8.46.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "glob": "^8.0.0",
    "mocha": "^10.2.0",
    "prettier": "^3.0.1",
    "typescript": "^5.1.6",
    "vsce": "^2.11.0"
  },
  "contributes": {
    "languages": [
      {
        "id": "sql",
        "aliases": [
          "SQL",
          "sql"
        ],
        "extensions": [
          ".sql",
          ".q"
        ]
      }
    ],
    "commands": [
      {
        "title": "Format Selection (SQL Formatter VSCode)",
        "shortTitle": "Format SQL",
        "command": "sql-formatter-vscode.format-selection"
      }
    ],
    "configuration": {
      "title": "SQL Formatter VSCode",
      "properties": {
        "SQL-Formatter-VSCode.SQLFlavourOverride": {
          "type": "string",
          "enum": [
            "sql",
            "bigquery",
            "db2",
            "hive",
            "mariadb",
            "mysql",
            "n1ql",
            "plsql",
            "postgresql",
            "redshift",
            "singlestoredb",
            "snowflake",
            "spark",
            "sqlite",
            "trino",
            "transactsql"
          ],
          "default": "sql",
          "markdownDescription": "Formats `sql` files in another SQL Flavour when no VSCode Language exists, such as the Microsoft PostgreSQL & MSSQL Extensions"
        },
        "SQL-Formatter-VSCode.ignoreTabSettings": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Ignore user and workplace settings for `tabSize` and `insertSpaces` (uses `#SQL-Formatter-VSCode.tabSizeOverride#` and `#SQL-Formatter-VSCode.insertSpacesOverride#`)?"
        },
        "SQL-Formatter-VSCode.tabSizeOverride": {
          "type": "number",
          "default": 2,
          "minimum": 1,
          "markdownDescription": "Override for `tabSize` if `#SQL-Formatter-VSCode.ignoreTabSettings#` is active"
        },
        "SQL-Formatter-VSCode.insertSpacesOverride": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Override for `insertSpaces` if `#SQL-Formatter-VSCode.ignoreTabSettings#` is active"
        },
        "SQL-Formatter-VSCode.keywordCase": {
          "type": "string",
          "enum": [
            "preserve",
            "upper",
            "lower"
          ],
          "default": "preserve",
          "markdownDescription": "Whether to print keywords in ALL CAPS, lowercase, or preserve existing"
        },
        "SQL-Formatter-VSCode.indentStyle": {
          "type": "string",
          "enum": [
            "standard",
            "tabularLeft",
            "tabularRight"
          ],
          "enumDescriptions": [
            "Standard SQL format, with cascading indents",
            "Maintain space column between keyword and args, aligning keywords to left",
            "Maintain space column between keyword and args, aligning keywords to right"
          ],
          "default": "standard",
          "markdownDescription": "Where to place keywords"
        },
        "SQL-Formatter-VSCode.logicalOperatorNewline": {
          "type": "string",
          "enum": [
            "before",
            "after"
          ],
          "default": "before",
          "markdownDescription": "Whether to break before or after AND and OR"
        },
        "SQL-Formatter-VSCode.tabulateAlias": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to right-align aliases to the longest line in the SELECT clause"
        },
        "SQL-Formatter-VSCode.commaPosition": {
          "type": "string",
          "enum": [
            "before",
            "after",
            "tabular"
          ],
          "enumDescriptions": [
            "Comma preceding each column",
            "Comma following each column",
            "Comma right-aligned to longest column line"
          ],
          "default": "after",
          "markdownDescription": "Where to place commas for SELECT and GROUP BY clauses"
        },
        "SQL-Formatter-VSCode.expressionWidth": {
          "type": "integer",
          "default": 50,
          "minimum": 0,
          "markdownDescription": "Number of characters allowed in each line before breaking"
        },
        "SQL-Formatter-VSCode.linesBetweenQueries": {
          "type": "integer",
          "default": 1,
          "minimum": 0,
          "markdownDescription": "How many newlines to place between each query / statement"
        },
        "SQL-Formatter-VSCode.denseOperators": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Strip whitespace around operators such as + or >="
        },
        "SQL-Formatter-VSCode.newlineBeforeSemicolon": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to place semicolon on its own line or on previous line"
        },
        "SQL-Formatter-VSCode.trailingNewline": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Whether to ensure there is a trailing newline at the end of the file"
        },
        "SQL-Formatter-VSCode.paramTypes": {
          "type": "object",
          "markdownDescription": "Specifies parameter placeholders types to support."
        }
      }
    }
  }
}
